# serverless-compose.yml
#: To control the stage, run sls deploy --stage prod

services:
  # Cognito is used to secure the API
  cognito:
    path: backend/cognito

  # Create DynamoDb Table and SNS Topic
  backend-resources:
    path: backend/backend-resources
    dependsOn: 
      - cognito

  # Create DynamoDb Table and SNS Topic
  step-function:
    path: backend/step-function
    params:
      DynamoTableName: ${backend-resources.DynamoTableName}
      DynamoTableArn: ${backend-resources.DynamoTableArn}
      DynamoSubscriberTableName: ${backend-resources.DynamoSubscriberTableName}
      DynamoSubscriberTableArn: ${backend-resources.DynamoSubscriberTableArn}
      SNSTopicName: ${backend-resources.SNSTopicName}
      SNSTopicARN: ${backend-resources.SNSTopicARN}
    dependsOn: 
      - backend-resources

  # We implement API-Lambda integration to allow the front-end make request to using end points POST:remind
  apigateway:
    path: backend/api-gateway
    params:
      CognitoUserPoolArn: ${cognito.CognitoUserPoolArn}
      CognitoResourceServerIdentifier: ${cognito.CognitoResourceServerIdentifier}
      DynamoTableName: ${backend-resources.DynamoTableName}
      DynamoTableArn: ${backend-resources.DynamoTableArn}
      DynamoSubscriberTableName: ${backend-resources.DynamoSubscriberTableName}
      DynamoSubscriberTableArn: ${backend-resources.DynamoSubscriberTableArn}
      SNSTopicName: ${backend-resources.SNSTopicName}
      SNSTopicARN: ${backend-resources.SNSTopicARN}
      StepFxnName: ${step-function.StepFxnName}
      StepFxnArn: ${step-function.StepFxnArn}
    dependsOn:
      - cognito
      - backend-resources
      - step-function

  # Update frontend .env file
  update-configs:
    path: backend/update-configs
    params:
      envfile: "./frontend/reminder-app/.env"
    dependsOn:
      - apigateway
      - cognito

 
  # Front is a single page react application deployed on S3 with client facing cloudfront distribution
  # frontend:
  #   path: frontend
  #   params:
  #     HostedUIURL: ${backend.HostedUIURL}
  #     ServiceEndpoint: ${backend.ServiceEndpoint}
  #   dependsOn:
  #     - backend