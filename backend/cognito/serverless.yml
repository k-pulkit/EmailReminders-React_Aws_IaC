service: backend-cognitopool
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-east-1

plugins:
  - serverless-cloudformation-sub-variables
  - serverless-parameters

custom:
  # Parameters for cloudformation resources
  parameters:
    CognitoUserPoolName:
      Type: String
      Description: database password
      Default: ${sls:stage}-${env:CognitoUserPoolName}
    CognitoUserPoolDomainName:
      Type: String
      Description: database password
      Default: ${sls:stage}-${env:CognitoUserPoolDomainName}
    CognitoUserPoolClientName:
      Type: String
      Description: database password
      Default: ${sls:stage}-${env:CognitoUserPoolClientName}
    CognitoResourceServerIdentifier:
      Type: String
      Description: database password
      Default: ${sls:stage}-${env:CognitoResourceServerIdentifier}

resources:
  Resources:
    # create cognito user pool
    MyCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: !Ref CognitoUserPoolName
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: false
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_CODE
    # we create resource server to support API boundaries in form of custom scopes
    MyUserPoolResourceServer:
      Type: AWS::Cognito::UserPoolResourceServer
      Properties:
        UserPoolId:
          Ref: MyCognitoUserPool
        Identifier: !Ref CognitoResourceServerIdentifier
        Name: '#{CognitoResourceServerIdentifier}-resource-server'
        Scopes: 
          - ScopeName: "set" 
            ScopeDescription: "Set reminder" 
          - ScopeName: "get"
            ScopeDescription: "Get list of reminders set"
      DependsOn: MyCognitoUserPool
    # create a domain as it is required for auth UI
    UserPoolDomain: 
      Type: AWS::Cognito::UserPoolDomain 
      Properties:
        UserPoolId:
          Ref: MyCognitoUserPool 
        Domain:
          Ref: CognitoUserPoolDomainName
      DependsOn: MyCognitoUserPool
    # create client for the user pool  
    UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName:
          Ref: CognitoUserPoolClientName
        GenerateSecret: false
        AllowedOAuthFlowsUserPoolClient: true
        UserPoolId:
          Ref: MyCognitoUserPool
        AllowedOAuthFlows:
          - implicit
          - code
        AllowedOAuthScopes: 
          - openid
          - profile
          - phone
          - email
          - "#{CognitoResourceServerIdentifier}/set"
          - "#{CognitoResourceServerIdentifier}/get"
        CallbackURLs:
          - https://pulkitkapoor.com/callback
        SupportedIdentityProviders:
          - COGNITO
      DependsOn:
        - MyCognitoUserPool
        - UserPoolDomain
        - MyUserPoolResourceServer
  Outputs:
    CognitoPoolId:
      Description: Pool ID of cognito pool created
      Value:
        Fn::GetAtt: 
          - MyCognitoUserPool 
          - UserPoolId
      Export:
        Name: ${sls:stage}-CognitoPoolId
    CognitoUserPoolArn:
      Description: Pool Arn of cognito pool created
      Value:
        Fn::GetAtt: 
          - MyCognitoUserPool 
          - Arn
      Export:
        Name: ${sls:stage}-CognitoUserPoolArn
    CognitoResourceServerIdentifier:
      Description: Identifier of resource server
      Value: !Ref CognitoResourceServerIdentifier
      Export:
        Name: ${sls:stage}-CognitoResourceServerIdentifier
    CognitoClientId:
      Description: Client ID of cognito pool client created
      Value: !Ref UserPoolClient
      Export:
        Name: ${sls:stage}-CognitoClientId
    HostedUIURL:
      Description: URL to use in website
      Value: "https://#{UserPoolDomain}.auth.#{AWS::Region}.amazoncognito.com/login?client_id=#{UserPoolClient}"
      Export:
        Name: ${sls:stage}-HostedUIURL
    