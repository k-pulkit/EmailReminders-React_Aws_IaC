service: backend-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 500
  timeout: 10
  environment:
    DynamoTableArn: ${param:DynamoTableArn}
    DynamoTableName: ${param:DynamoTableName}
    SubscriberDynamoTableArn: ${param:DynamoSubscriberTableArn}
    SubscriberDynamoTableName: ${param:DynamoSubscriberTableName}
    SNSTopicName: ${param:SNSTopicName}
    SNSTopicARN: ${param:SNSTopicARN}

plugins:
  - serverless-cloudformation-sub-variables
  - serverless-apigateway-service-proxy
  - serverless-parameters

custom:
  # Input params
  MyCognitoUserPoolArn: ${param:CognitoUserPoolArn}
  CognitoResourceServerIdentifier: ${param:CognitoResourceServerIdentifier}

  parameters:
    SNSTopicARN:
      Type: String
      Description: "Arn of SNS Topic"
      Default: ${param:SNSTopicARN}


  apiGatewayServiceProxies:
    - dynamodb:
        path: /remind/getSubscriptionRecord
        method: get
        tableName: ${param:DynamoSubscriberTableName}
        hashKey:
          queryStringParam: email # use query string parameter
          attributeType: S
        action: GetItem
        cors: true
        authorizationType: COGNITO_USER_POOLS
        authorizerId:
          Ref: MyCognitoAuthorizerApiGatewayAuthorizer
        authorizationScopes: [aws.cognito.signin.user.admin]
    - sns:
        path: /remind/subscribe
        method: get
        topicName: ${param:SNSTopicName}
        roleArn:
          Fn::GetAtt:
            - APIGatewaySNSSubRole
            - Arn
        request:
          template:
            application/json:
              Fn::Sub:
                - "Action=Subscribe&Protocol=email&Endpoint=$util.urlEncode($input.params().querystring.email)&TopicArn=$util.urlEncode('#{MyTopicArn}')&ReturnSubscriptionArn=true"
                - MyTopicArn: ${param:SNSTopicARN}
            application/x-www-form-urlencoded:
              Fn::Sub:
                - "Action=Subscribe&Protocol=email&Endpoint=$util.urlEncode($input.params().querystring.email)&TopicArn=$util.urlEncode('#{MyTopicArn}')&ReturnSubscriptionArn=true"
                - MyTopicArn: ${param:SNSTopicARN}
        authorizationType: COGNITO_USER_POOLS
        authorizerId:
          Ref: MyCognitoAuthorizerApiGatewayAuthorizer
        authorizationScopes: [aws.cognito.signin.user.admin]
    - sns:
        path: /remind/isSubscribeVerified
        method: post
        topicName: ${param:SNSTopicName}
        roleArn:
          Fn::GetAtt:
            - APIGatewaySNSSubRole
            - Arn
        request:
          template:
            application/json: "Action=GetSubscriptionAttributes&SubscriptionArn=$util.urlEncode($input.path('$').subscriptionArn)"
            application/x-www-form-urlencoded: "Action=GetSubscriptionAttributes&SubscriptionArn=$util.urlEncode($input.path('$').subscriptionArn)"
        response:
          template:
            success: |-
                      #set($root= $input.path('$'))
                      {
                        "pending": $root.GetSubscriptionAttributesResponse.GetSubscriptionAttributesResult.Attributes.PendingConfirmation
                      }
        authorizationType: COGNITO_USER_POOLS
        authorizerId:
          Ref: MyCognitoAuthorizerApiGatewayAuthorizer
        authorizationScopes: [aws.cognito.signin.user.admin]

functions:
  invokeSteps:
    name: ${self:provider.stage}-invokeReminderStepFunction
    handler: src/handler.run
    events:
      - http:
          path: remind
          method: post
          integration: lambda
          cors: true
          request:
            schemas:
              application/json: ${file(./request-schema.json)}
          authorizer:
            name: MyCognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.MyCognitoUserPoolArn}
            scopes:
              - "${self:custom.CognitoResourceServerIdentifier}/set"
              - aws.cognito.signin.user.admin

resources:
  Resources:
    APIGatewaySNSSubRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:stage}-Remind-ApiGateway-SNSSubscribe-Role
        Description: "Role for the API Gateway"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Principal:
                Service: 
                  - "apigateway.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "APIGatewaySNSSubscribe"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
                - Effect: Allow
                  Action: 
                    - "sns:Subscribe"
                    - "sns:GetSubscriptionAttributes"
                  Resource:
                    - "#{SNSTopicARN}"
