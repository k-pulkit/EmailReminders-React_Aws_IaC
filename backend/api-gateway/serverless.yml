service: backend-api
frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 500
  timeout: 10
  environment:
    DynamoTableArn: ${param:DynamoTableArn}
    DynamoTableName: ${param:DynamoTableName}
    SubscriberDynamoTableArn: ${param:DynamoSubscriberTableArn}
    SubscriberDynamoTableName: ${param:DynamoSubscriberTableName}
    SNSTopicName: ${param:SNSTopicName}
    SNSTopicARN: ${param:SNSTopicARN}

plugins:
  - serverless-cloudformation-sub-variables
  - serverless-parameters

custom:
  # Input params
  MyCognitoUserPoolArn: ${param:CognitoUserPoolArn}
  CognitoResourceServerIdentifier: ${param:CognitoResourceServerIdentifier}

  parameters:
    SNSTopicARN:
      Type: String
      Description: "Arn of SNS Topic"
      Default: ${param:SNSTopicARN}
    SubscriberDynamoTableArn:
      Type: String
      Description: "Arn of SNS Topic"
      Default: ${param:DynamoSubscriberTableArn}


functions:
  invokeSteps:
    role: LambdaRole1
    name: ${self:provider.stage}-invokeReminderStepFunction
    handler: src/api/invokeSteps/handler.run
    events:
      - http:
          path: /remind
          method: post
          integration: lambda
          cors: true
          request:
            schemas:
              application/json: ${file(./request-schema.json)}
          authorizer:
            name: MyCognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.MyCognitoUserPoolArn}
            scopes:
              - "${self:custom.CognitoResourceServerIdentifier}/set"
              - aws.cognito.signin.user.admin
  fetchSubscriptionInfo:
    role: LambdaRole2
    name: ${self:provider.stage}-fetchSubscriptionInfoFunction
    handler: src/api/fetchSubscriptionInfo/handler.run
    events:
      - http:
          path: /remind/fetchSubscriptionInfo
          method: get
          integration: lambda
          cors: true
          authorizer:
            name: MyCognitoAuthorizer
            type: COGNITO_USER_POOLS
            arn: ${self:custom.MyCognitoUserPoolArn}
            scopes:
              - aws.cognito.signin.user.admin

resources:
  Resources:
    LambdaRole1:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:stage}-Remind-Lambda-Role-1
        Description: "Role to enable trigger of Step functions"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Principal:
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${sls:stage}-Remind-Lambda-Role-1-Policies
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "arn:#{AWS::Partition}:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/lambda/dev-invokeReminderStepFunction:*:*"
                - Effect: Allow
                  Action: 
                    - "states:StartExecution"
                  Resource:
                    - "*"
    LambdaRole2:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${sls:stage}-Remind-Lambda-Role-2
        Description: "Role to manage topic subscriptions"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement: 
            - Effect: Allow
              Principal:
                Service: 
                  - "lambda.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies:
          - PolicyName: ${sls:stage}-Remind-Lambda-Role-2-Policies
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource:
                    - "arn:#{AWS::Partition}:logs:#{AWS::Region}:#{AWS::AccountId}:log-group:/aws/lambda/dev-fetchSubscriptionInfo:*:*"
                - Effect: Allow
                  Action: 
                    - "dynamodb:Query"
                    - "dynamodb:PutItem"
                    - "sns:Subscribe"
                    - "sns:GetSubscriptionAttributes"
                  Resource:
                    - "#{SNSTopicARN}"
                    - "#{SubscriberDynamoTableArn}"